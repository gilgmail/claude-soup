{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useAutoMode = () => {\n  _s();\n  const [settings, setSettings] = useState({\n    autoGenerate: true,\n    skipConfirmations: true,\n    autoSelectTheme: true,\n    autoEnableAI: true,\n    autoAcceptSuggestions: true,\n    quickMode: true\n  });\n  useEffect(() => {\n    // 從 localStorage 載入設定\n    const savedSettings = localStorage.getItem('autoModeSettings');\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings));\n    }\n\n    // 監聽設定變更\n    const handleSettingsChange = event => {\n      setSettings(event.detail);\n    };\n    window.addEventListener('autoModeSettingsChanged', handleSettingsChange);\n    return () => {\n      window.removeEventListener('autoModeSettingsChanged', handleSettingsChange);\n    };\n  }, []);\n\n  // 自動確認函數 - 所有詢問都回答 yes\n  const autoConfirm = (question, defaultValue = true) => {\n    if (settings.skipConfirmations) {\n      console.log(`🤖 自動模式: \"${question}\" -> YES`);\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(defaultValue);\n  };\n\n  // 自動選擇最佳選項\n  const autoSelect = (options, criteria = 'first') => {\n    if (!settings.autoSelectTheme) return null;\n    switch (criteria) {\n      case 'random':\n        return options[Math.floor(Math.random() * options.length)];\n      case 'best':\n        // 選擇評分最高的\n        return options.reduce((best, current) => (current.score || 0) > (best.score || 0) ? current : best);\n      case 'first':\n      default:\n        return options[0];\n    }\n  };\n\n  // 自動生成建議\n  const autoGenerateContent = async (type, context) => {\n    if (!settings.autoGenerate) return null;\n\n    // 模擬自動生成不同類型的內容\n    const generators = {\n      quote: () => `成功來自${Math.random() > 0.5 ? '堅持' : '努力'}，永不放棄就是勝利！`,\n      theme: () => ['success', 'growth', 'courage'][Math.floor(Math.random() * 3)],\n      tone: () => ['inspirational', 'motivational', 'reflective'][Math.floor(Math.random() * 3)]\n    };\n    return generators[type] ? generators[type]() : null;\n  };\n\n  // 快速模式 - 減少延遲\n  const getDelay = (normalDelay = 1000) => {\n    return settings.quickMode ? Math.min(normalDelay / 3, 300) : normalDelay;\n  };\n  return {\n    settings,\n    autoConfirm,\n    autoSelect,\n    autoGenerateContent,\n    getDelay,\n    isFullyAuto: Object.values(settings).every(v => v === true)\n  };\n};\n_s(useAutoMode, \"wfqOlEr4Z/NnzV+8poCYpurPYVg=\");\nexport default useAutoMode;","map":{"version":3,"names":["useState","useEffect","useAutoMode","_s","settings","setSettings","autoGenerate","skipConfirmations","autoSelectTheme","autoEnableAI","autoAcceptSuggestions","quickMode","savedSettings","localStorage","getItem","JSON","parse","handleSettingsChange","event","detail","window","addEventListener","removeEventListener","autoConfirm","question","defaultValue","console","log","Promise","resolve","autoSelect","options","criteria","Math","floor","random","length","reduce","best","current","score","autoGenerateContent","type","context","generators","quote","theme","tone","getDelay","normalDelay","min","isFullyAuto","Object","values","every","v"],"sources":["/Users/gilko/Documents/claude-code/soup2/motivation-script-generator/src/hooks/useAutoMode.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useAutoMode = () => {\n  const [settings, setSettings] = useState({\n    autoGenerate: true,\n    skipConfirmations: true,\n    autoSelectTheme: true,\n    autoEnableAI: true,\n    autoAcceptSuggestions: true,\n    quickMode: true\n  });\n\n  useEffect(() => {\n    // 從 localStorage 載入設定\n    const savedSettings = localStorage.getItem('autoModeSettings');\n    if (savedSettings) {\n      setSettings(JSON.parse(savedSettings));\n    }\n\n    // 監聽設定變更\n    const handleSettingsChange = (event) => {\n      setSettings(event.detail);\n    };\n\n    window.addEventListener('autoModeSettingsChanged', handleSettingsChange);\n    \n    return () => {\n      window.removeEventListener('autoModeSettingsChanged', handleSettingsChange);\n    };\n  }, []);\n\n  // 自動確認函數 - 所有詢問都回答 yes\n  const autoConfirm = (question, defaultValue = true) => {\n    if (settings.skipConfirmations) {\n      console.log(`🤖 自動模式: \"${question}\" -> YES`);\n      return Promise.resolve(true);\n    }\n    return Promise.resolve(defaultValue);\n  };\n\n  // 自動選擇最佳選項\n  const autoSelect = (options, criteria = 'first') => {\n    if (!settings.autoSelectTheme) return null;\n    \n    switch (criteria) {\n      case 'random':\n        return options[Math.floor(Math.random() * options.length)];\n      case 'best':\n        // 選擇評分最高的\n        return options.reduce((best, current) => \n          (current.score || 0) > (best.score || 0) ? current : best\n        );\n      case 'first':\n      default:\n        return options[0];\n    }\n  };\n\n  // 自動生成建議\n  const autoGenerateContent = async (type, context) => {\n    if (!settings.autoGenerate) return null;\n    \n    // 模擬自動生成不同類型的內容\n    const generators = {\n      quote: () => `成功來自${Math.random() > 0.5 ? '堅持' : '努力'}，永不放棄就是勝利！`,\n      theme: () => ['success', 'growth', 'courage'][Math.floor(Math.random() * 3)],\n      tone: () => ['inspirational', 'motivational', 'reflective'][Math.floor(Math.random() * 3)]\n    };\n    \n    return generators[type] ? generators[type]() : null;\n  };\n\n  // 快速模式 - 減少延遲\n  const getDelay = (normalDelay = 1000) => {\n    return settings.quickMode ? Math.min(normalDelay / 3, 300) : normalDelay;\n  };\n\n  return {\n    settings,\n    autoConfirm,\n    autoSelect,\n    autoGenerateContent,\n    getDelay,\n    isFullyAuto: Object.values(settings).every(v => v === true)\n  };\n};\n\nexport default useAutoMode;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}